---
// src/components/dashboard/tabs/NotesTabContent.astro
---

<div id="notes-content" class="space-y-6">
    <div class="flex justify-between items-center">
        <h3 class="font-semibold text-lg">Notes</h3>
    </div>

    <!-- Notes List -->
    <div class="space-y-4" id="notes-list">
        <!-- Notes will be populated here -->
        <div class="text-gray-500 text-center py-8" id="no-notes-message">
            <span class="material-icons text-4xl">note_add</span>
            <p class="mt-2">No notes available</p>
        </div>
    </div>
</div>

<script>
    import { selectedRelation } from "../../../store/relationshipStore";

    async function fetchNotes(relationId: string) {
        try {
            const response = await fetch(`/api/relations/${relationId}/notes`);
            if (!response.ok) throw new Error("Failed to fetch notes");

            const data = await response.json();
            return data.data || [];
        } catch (error) {
            console.error("Error fetching notes:", error);
            return [];
        }
    }

    function formatDate(dateString: string): string {
        return new Date(dateString).toLocaleString();
    }

    function createNoteElement(note: any): HTMLElement {
        const noteDiv = document.createElement("div");
        noteDiv.className = "bg-white border rounded-lg p-4 shadow-sm";

        noteDiv.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <div>
                    <h4 class="font-medium">${note.title}</h4>
                    <p class="text-sm text-gray-500">${formatDate(note.createdAt)}</p>
                </div>
                ${note.category ? `<span class="px-2 py-1 bg-gray-100 text-sm rounded-full">${note.category}</span>` : ""}
            </div>
            <p class="text-gray-600">${note.content}</p>
        `;

        return noteDiv;
    }

    function updateNotesList(notes: any[]) {
        const notesList = document.getElementById("notes-list");
        const noNotesMessage = document.getElementById("no-notes-message");

        if (!notesList) return;

        // Clear existing notes
        notesList.innerHTML = "";

        if (notes.length === 0) {
            if (noNotesMessage) noNotesMessage.style.display = "block";
            return;
        }

        if (noNotesMessage) noNotesMessage.style.display = "none";
        notes.forEach((note) => {
            notesList.appendChild(createNoteElement(note));
        });
    }

    selectedRelation.subscribe(async (relation) => {
        if (!relation) {
            updateNotesList([]);
            return;
        }

        const notes = await fetchNotes(relation.id);
        updateNotesList(notes);
    });
</script>
