---
// src/components/dashboard/tabs/ContactsTabContent.astro
---

<div id="contacts-content" class="space-y-6">
    <div class="flex justify-between items-center">
        <h3 class="font-semibold text-lg">Contact Persons</h3>
    </div>

    <!-- Contacts List -->
    <div class="overflow-hidden" id="contacts-container">
        <div class="text-gray-500 text-center py-8" id="no-contacts-message">
            <span class="material-icons text-4xl">people</span>
            <p class="mt-2">No contact persons available</p>
        </div>

        <table class="min-w-full hidden" id="contacts-table">
            <thead class="bg-gray-50">
                <tr>
                    <th
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                        >Name</th
                    >
                    <th
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                        >Position</th
                    >
                    <th
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                        >Email</th
                    >
                    <th
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                        >Phone</th
                    >
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="contacts-list">
            </tbody>
        </table>
    </div>
</div>

<script>
    import { selectedRelation } from "../../../store/relationshipStore";

    async function fetchContacts(relationId: string) {
        try {
            const response = await fetch(
                `/api/relations/${relationId}/contact-persons`,
            );
            if (!response.ok) throw new Error("Failed to fetch contacts");

            const data = await response.json();
            return data.data || [];
        } catch (error) {
            console.error("Error fetching contacts:", error);
            return [];
        }
    }

    function createContactRow(contact: any): HTMLElement {
        const row = document.createElement("tr");

        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                    <div>
                        <div class="text-sm font-medium text-gray-900">
                            ${contact.name}
                            ${contact.isMainContact ? '<span class="ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">Main</span>' : ""}
                        </div>
                    </div>
                </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${contact.position || "-"}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${contact.email || "-"}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${contact.phone || "-"}
            </td>
        `;

        return row;
    }

    function updateContactsList(contacts: any[]) {
        const contactsTable = document.getElementById("contacts-table");
        const contactsList = document.getElementById("contacts-list");
        const noContactsMessage = document.getElementById(
            "no-contacts-message",
        );

        if (!contactsTable || !contactsList || !noContactsMessage) return;

        if (contacts.length === 0) {
            contactsTable.classList.add("hidden");
            noContactsMessage.classList.remove("hidden");
            return;
        }

        contactsTable.classList.remove("hidden");
        noContactsMessage.classList.add("hidden");

        // Clear existing contacts
        contactsList.innerHTML = "";

        // Add new contacts
        contacts.forEach((contact) => {
            contactsList.appendChild(createContactRow(contact));
        });
    }

    selectedRelation.subscribe(async (relation) => {
        if (!relation) {
            updateContactsList([]);
            return;
        }

        const contacts = await fetchContacts(relation.id);
        updateContactsList(contacts);
    });
</script>
