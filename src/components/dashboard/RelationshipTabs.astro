---
// src/components/relationship/RelationshipTabs.astro
import OrganizationTabContent from "./tabs/OrganizationTabContent.astro";
import AddressTabContent from "./tabs/AddressTabContent.astro";
import FinancialTabContent from "./tabs/FinancialTabContent.astro";
import ContactsTabContent from "../dashboard/tabs/ContactTabContent.astro";
import DocumentsTabContent from "../dashboard/tabs/DocumentTabContent.astro";
import NotesTabContent from "../dashboard/tabs/NoteTabContent.astro";

const tabs = [
    { id: "organization", label: "Organization Information" },
    { id: "address", label: "Address Details" },
    { id: "financial", label: "Financial Data" },
    { id: "contacts", label: "Contact Persons" },
    { id: "documents", label: "Documents" },
    { id: "notes", label: "Notes" },
];

interface Props {
    defaultTab?: string;
}

const { defaultTab = "organization" } = Astro.props;
---

<div class="flex-1 flex flex-col min-h-0">
    <!-- Tab List -->
    <div class="flex gap-1 px-4 border-b bg-white" role="tablist">
        {
            tabs.map((tab) => (
                <button
                    type="button"
                    role="tab"
                    aria-controls={`panel-${tab.id}`}
                    data-tab={tab.id}
                    class:list={[
                        "px-4 py-2 text-sm border-b-2 transition-colors",
                        "hover:text-gray-800",
                        {
                            "border-blue-600 text-blue-600":
                                tab.id === defaultTab,
                            "border-transparent text-gray-600":
                                tab.id !== defaultTab,
                        },
                    ]}
                >
                    {tab.label}
                </button>
            ))
        }
    </div>

    <!-- Tab Panels -->
    <div class="flex-1 overflow-y-auto">
        <div
            role="tabpanel"
            id="panel-organization"
            class:list={["p-6", { hidden: defaultTab !== "organization" }]}
            data-tab="organization"
        >
            <OrganizationTabContent />
        </div>

        <div
            role="tabpanel"
            id="panel-address"
            class:list={["p-6", { hidden: defaultTab !== "address" }]}
            data-tab="address"
        >
            <AddressTabContent />
        </div>

        <div
            role="tabpanel"
            id="panel-financial"
            class:list={["p-6", { hidden: defaultTab !== "financial" }]}
            data-tab="financial"
        >
            <FinancialTabContent />
        </div>

        <div
            role="tabpanel"
            id="panel-contacts"
            class:list={["p-6", { hidden: defaultTab !== "contacts" }]}
            data-tab="contacts"
        >
            <ContactsTabContent />
        </div>

        <div
            role="tabpanel"
            id="panel-documents"
            class:list={["p-6", { hidden: defaultTab !== "documents" }]}
            data-tab="documents"
        >
            <DocumentsTabContent />
        </div>

        <div
            role="tabpanel"
            id="panel-notes"
            class:list={["p-6", { hidden: defaultTab !== "notes" }]}
            data-tab="notes"
        >
            <NotesTabContent />
        </div>
    </div>
</div>

<script>
    import { modalState } from "../../store/relationshipStore";

    class TabController {
        private tabs: NodeListOf<HTMLElement>;
        private panels: NodeListOf<HTMLElement>;

        constructor() {
            this.tabs = document.querySelectorAll('[role="tab"]');
            this.panels = document.querySelectorAll('[role="tabpanel"]');
            this.initialize();
        }

        private initialize() {
            if (!this.tabs.length || !this.panels.length) {
                console.error("Required tab elements not found");
                return;
            }

            // Setup event listeners
            this.tabs.forEach((tab) => {
                tab.addEventListener("click", (e) => {
                    e.preventDefault();
                    const tabId = tab.getAttribute("data-tab");
                    if (tabId) {
                        this.handleTabClick(tabId);
                    }
                });
            });

            // Subscribe to modal state changes
            modalState.subscribe((state) => {
                if (state.activeTab) {
                    this.switchTab(state.activeTab);
                }
            });
        }

        private handleTabClick(tabId: string) {
            this.switchTab(tabId);
            modalState.setKey("activeTab", tabId);
        }

        private switchTab(tabId: string) {
            // Update tab buttons
            this.tabs.forEach((tab) => {
                const isSelected = tab.getAttribute("data-tab") === tabId;
                tab.setAttribute("aria-selected", String(isSelected));
                tab.classList.toggle("border-blue-600", isSelected);
                tab.classList.toggle("text-blue-600", isSelected);
                tab.classList.toggle("border-transparent", !isSelected);
                tab.classList.toggle("text-gray-600", !isSelected);
            });

            // Update panels
            this.panels.forEach((panel) => {
                const isPanelActive = panel.getAttribute("data-tab") === tabId;
                panel.classList.toggle("hidden", !isPanelActive);
            });
        }
    }

    // Initialize tab controller when the component mounts
    new TabController();
</script>
