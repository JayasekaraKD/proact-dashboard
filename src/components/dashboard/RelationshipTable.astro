---
// src/components/dashboard/RelationshipTable.astro
import type { Relation } from "../../db/schema";

interface Props {
    data: Relation[];
}

const { data } = Astro.props;
---

<script id="relationship-data" type="application/json" set:html={JSON.stringify(data)}>
</script>

<!-- Delete Confirmation Dialog -->
<div id="delete-dialog" class="hidden">
    <div class="fixed inset-0 bg-black/50 z-40"></div>
    <div class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg w-full max-w-md p-6 z-50">
        <h2 class="text-lg font-semibold text-red-600 mb-4">Delete Relationship</h2>
        
        <div class="py-4">
            <p class="text-gray-600">
                Are you sure you want to delete the relationship with <span id="relation-name" class="font-medium"></span>? 
                This action cannot be undone.
            </p>
            <div class="mt-2 bg-yellow-50 p-3 rounded-md">
                <p class="text-sm text-yellow-800">
                    This will also delete all associated:
                </p>
                <ul class="mt-1 text-sm text-yellow-700 list-disc list-inside">
                    <li>Contact persons</li>
                    <li>Documents</li>
                    <li>Notes</li>
                    <li>Financial records</li>
                </ul>
            </div>

            <!-- Error Message -->
            <div id="delete-error" class="hidden mt-3 text-sm text-red-600 bg-red-50 p-3 rounded-md"></div>
        </div>

        <div class="flex justify-end gap-3 mt-6">
            <button
                id="cancel-delete"
                class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-md"
            >
                Cancel
            </button>
            <button
                id="confirm-delete"
                class="px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-md disabled:opacity-50 flex items-center gap-2"
            >
                Delete Relationship
            </button>
        </div>
    </div>
</div>

<div class="bg-white">
    <div class="overflow-x-auto">
        <table class="min-w-full">
            <thead>
                <tr class="bg-white border-b">
                    <th class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase">
                        Short Name
                    </th>
                    <th class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase">
                        Telephone
                    </th>
                    <th class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase">
                        Street
                    </th>
                    <th class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase">
                        House Number
                    </th>
                    <th class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase">
                        Postcode
                    </th>
                    <th class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase">
                        Place
                    </th>
                    <th class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase">
                        Land
                    </th>
                    <th class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase">
                        E-Mail
                    </th>
                    <th class="py-4 px-4 text-right text-sm font-semibold text-[#1e518b] uppercase">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-100">
                {
                    data.map((item) => (
                        <tr class="hover:bg-[#00c07f] hover:text-white transition-colors">
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.shortName}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                                {item.telephone}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.street}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                                {item.houseNumber}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                                {item.postcode}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.place}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.land}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.email}
                            </td>
                            <td class="px-4 py-3.5 text-right">
                                <div class="flex justify-end gap-2">
                                    <button
                                        class="text-[#1e518b] hover:text-white p-1 rounded-full hover:bg-[#1e518b]/10"
                                        data-action="view"
                                        data-id={item.id}
                                    >
                                        <span class="material-icons">visibility</span>
                                    </button>
                                    <button
                                        class="text-[#1e518b] hover:text-white p-1 rounded-full hover:bg-[#1e518b]/10"
                                        data-action="edit"
                                        data-id={item.id}
                                    >
                                        <span class="material-icons">edit</span>
                                    </button>
                                    <button
                                        class="text-red-600 hover:text-white p-1 rounded-full hover:bg-red-50"
                                        data-action="delete"
                                        data-id={item.id}
                                        data-name={item.name || item.shortName}
                                    >
                                        <span class="material-icons">delete</span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    import {
        handleView,
        handleEdit,
        relationships,
    } from "../../store/relationshipStore";

    // Initialize the store with the server data
    const dataElement = document.getElementById('relationship-data');
    if (dataElement?.textContent) {
        const initialData = JSON.parse(dataElement.textContent);
        relationships.set(initialData);
    }

    // Delete dialog elements
    const deleteDialog = document.getElementById('delete-dialog');
    const relationNameSpan = document.getElementById('relation-name');
    const cancelButton = document.getElementById('cancel-delete');
    const confirmButton = document.getElementById('confirm-delete');
    const errorDiv = document.getElementById('delete-error');

    let currentRelationId: string | null = null;

    // Show delete dialog
    function showDeleteDialog(relationId: string, relationName: string) {
        if (!deleteDialog || !relationNameSpan) return;
        
        currentRelationId = relationId;
        relationNameSpan.textContent = relationName;
        deleteDialog.classList.remove('hidden');
    }

    // Hide delete dialog
    function hideDeleteDialog() {
        if (!deleteDialog || !errorDiv) return;
        
        currentRelationId = null;
        deleteDialog.classList.add('hidden');
        errorDiv.classList.add('hidden');
    }

    // Handle delete confirmation
    async function handleDeleteConfirm() {
        if (!currentRelationId || !confirmButton || !errorDiv) return;

        try {
            (confirmButton as HTMLButtonElement).disabled = true;
            confirmButton.innerHTML = '<span class="material-icons animate-spin text-sm">refresh</span> Deleting...';

            const response = await fetch(`/api/relationships/${currentRelationId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Failed to delete relationship');
            }

            // Update the local store
            const currentRelations = relationships.get();
            relationships.set(currentRelations.filter(r => r.id !== currentRelationId));

            // Hide the dialog
            hideDeleteDialog();

            // Optionally reload the page to ensure everything is in sync
            window.location.reload();

        } catch (error) {
            errorDiv.textContent = error instanceof Error ? error.message : 'Failed to delete relationship';
            errorDiv.classList.remove('hidden');
        } finally {
            (confirmButton as HTMLButtonElement).disabled = false;
            confirmButton.textContent = 'Delete Relationship';
        }
    }

    // Attach event listeners
    function attachEventListeners() {
        document.querySelectorAll("[data-action]").forEach((button) => {
            button.addEventListener("click", async (e) => {
                const button = e.currentTarget as HTMLButtonElement;
                const action = button.getAttribute("data-action");
                const id = button.getAttribute("data-id");
                
                if (!id) return;
                
                const relation = relationships.get().find((r) => r.id === id);
                
                if (!relation) {
                    console.warn("No relation found for id:", id);
                    return;
                }

                switch (action) {
                    case "view":
                        handleView(relation);
                        break;
                    case "edit":
                        handleEdit(relation);
                        break;
                    case "delete":
                        const name = button.getAttribute("data-name");
                        if (name) showDeleteDialog(id, name);
                        break;
                }
            });
        });
    }

    // Attach dialog event listeners
    cancelButton?.addEventListener('click', hideDeleteDialog);
    confirmButton?.addEventListener('click', handleDeleteConfirm);

    // Click outside to close
    deleteDialog?.addEventListener('click', (e) => {
        if (e.target === deleteDialog) {
            hideDeleteDialog();
        }
    });

    // Initial event listeners attachment
    attachEventListeners();

    // Subscribe to relationships changes to reattach event listeners
    relationships.subscribe(() => {
        attachEventListeners();
    });
</script>