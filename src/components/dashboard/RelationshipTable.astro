---
// src/components/dashboard/RelationshipTable.astro
import type { Relation } from "../../db/schema";

interface Props {
    data: Relation[];
}

const { data } = Astro.props;
---
<!-- Add the data as a hidden element -->
<!-- Fix: Encode the data properly -->
<script id="relationship-data" type="application/json" set:html={JSON.stringify(data)}>
</script>


<div class="bg-white">
    <div class="overflow-x-auto">
        <table class="min-w-full">
            <thead>
                <tr class="bg-white border-b">
                    <th
                        class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        Short Name
                    </th>
                    <th
                        class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        Telephone
                    </th>
                    <th
                        class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        Street
                    </th>
                    <th
                        class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        House Number
                    </th>
                    <th
                        class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        Postcode
                    </th>
                    <th
                        class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        Place
                    </th>
                    <th
                        class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        Land
                    </th>
                    <th
                        class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        E-Mail
                    </th>
                    <th
                        class="py-4 px-4 text-right text-sm font-semibold text-[#1e518b] uppercase"
                    >
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-100">
                {
                    data.map((item) => (
                        <tr class="hover:bg-[#00c07f] hover:text-white transition-colors">
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.shortName}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                                {item.telephone}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.street}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                                {item.houseNumber}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                                {item.postcode}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.place}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.land}
                            </td>
                            <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                                {item.email}
                            </td>
                            <td class="px-4 py-3.5 text-right">
                                <div class="flex justify-end gap-2">
                                    <button
                                        class="text-[#1e518b] hover:text-white p-1 rounded-full hover:bg-[#1e518b]/10"
                                        data-action="view"
                                        data-id={item.id}
                                    >
                                        <span class="material-icons">
                                            visibility
                                        </span>
                                    </button>
                                    <button
                                        class="text-[#1e518b] hover:text-white p-1 rounded-full hover:bg-[#1e518b]/10"
                                        data-action="edit"
                                        data-id={item.id}
                                    >
                                        <span class="material-icons">edit</span>
                                    </button>
                                    <button
                                        class="text-red-600 hover:text-white p-1 rounded-full hover:bg-red-50"
                                        data-action="delete"
                                        data-id={item.id}
                                    >
                                        <span class="material-icons">
                                            delete
                                        </span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    import {
        handleView,
        handleEdit,
        handleDelete,
        relationships,
    } from "../../store/relationshipStore";

    // Initialize the store with the server data
    const dataElement = document.getElementById('relationship-data');
    if (dataElement?.textContent) {
        const initialData = JSON.parse(dataElement.textContent);
        relationships.set(initialData);
    }

    // Subscribe to relationships changes to update the table
    relationships.subscribe(updatedRelations => {
        const tableBody = document.querySelector('tbody');
        if (!tableBody || !updatedRelations) return;

        // Refresh the table content
        tableBody.innerHTML = updatedRelations.map(item => `
            <tr class="hover:bg-[#00c07f] hover:text-white transition-colors">
                <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                    ${item.shortName}
                </td>
                <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                    ${item.telephone || ''}
                </td>
                <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                    ${item.street || ''}
                </td>
                <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                    ${item.houseNumber || ''}
                </td>
                <td class="px-4 py-3.5 text-sm text-gray-900 group-hover:text-white">
                    ${item.postcode || ''}
                </td>
                <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                    ${item.place || ''}
                </td>
                <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                    ${item.land || ''}
                </td>
                <td class="px-4 py-3.5 text-sm text-[#1e518b] group-hover:text-white">
                    ${item.email || ''}
                </td>
                <td class="px-4 py-3.5 text-right">
                    <div class="flex justify-end gap-2">
                        <button
                            class="text-[#1e518b] hover:text-white p-1 rounded-full hover:bg-[#1e518b]/10"
                            data-action="view"
                            data-id="${item.id}"
                        >
                            <span class="material-icons">visibility</span>
                        </button>
                        <button
                            class="text-[#1e518b] hover:text-white p-1 rounded-full hover:bg-[#1e518b]/10"
                            data-action="edit"
                            data-id="${item.id}"
                        >
                            <span class="material-icons">edit</span>
                        </button>
                        <button
                            class="text-red-600 hover:text-white p-1 rounded-full hover:bg-red-50"
                            data-action="delete"
                            data-id="${item.id}"
                        >
                            <span class="material-icons">delete</span>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');

        // Reattach event listeners
        attachEventListeners();
    });

    function attachEventListeners() {
        document.querySelectorAll("button[data-action]").forEach((button) => {
            button.addEventListener("click", async (e) => {
                const button = e.currentTarget as HTMLButtonElement;
                const action = button.getAttribute("data-action");
                const id = button.getAttribute("data-id");
                
                if (!id) return;
                
                const relation = relationships.get().find((r) => r.id === id);
                console.log("Found relation:", relation); // Debug log
                
                if (!relation) {
                    console.warn("No relation found for id:", id);
                    return;
                }

                switch (action) {
                    case "view":
                        handleView(relation);
                        break;
                    case "edit":
                        handleEdit(relation);
                        break;
                    case "delete":
                        try {
                            await handleDelete(relation);
                            // After successful deletion, update the relationships store
                            const currentRelations = relationships.get();
                            relationships.set(currentRelations.filter(r => r.id !== id));
                        } catch (error) {
                            console.error("Error deleting relation:", error);
                        }
                        break;
                }
            });
        });
    }

    // Initial event listeners attachment
    attachEventListeners();
</script>